import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class Savage2Login {
	final static String MASTER_SERVER = "masterserver.savage2.s2games.com";
	final static String CHAT_SERVER = "216.127.51.198";
	boolean chatServerUp = true;

	final static String USERNAME = "camrose";
	final static String PASSWORD = "123camrose";
	final static int accountId = 845432;

	final static String US_WEST1_HOST = "162.248.7.113";
	final static int US_WEST1_PORT = 13235;

	final static String OPHELIA_EU1_HOST = "188.40.72.24";
	final static int OPHELIA_EU1_PORT = 11236;

	final static String OPHELIA_EU3_HOST = "188.40.72.24";
	final static int OPHELIA_EU3_PORT = 11236;

	final static String MGF_GAMING_HOST = "78.46.21.137";
	final static int MGF_GAMING_PORT = 11235;

	final static String GG = "192.99.34.197";
	final static int GGport = 39474;
	
	final static String NA_EAST_HOST = "192.99.34.197";
	final static int NA_EAST_PORT = 11239;

	static DatagramSocket gameServerClientSocket = null;
	final static String GAME_SERVER_HOSTNAME = OPHELIA_EU3_HOST;//"127.0.0.1";//US_WEST1_HOST;
	final static int GAME_SERVER_PORT =  11236;
	
	final static String BOTMASTER = null; //nickname of user controlling the client

	static byte[] clientID = {(byte) 0xFE, 0x08 }; // seemingly generated by client

	String cookie = null;

	Socket masterserverSocket = null;
	DataOutputStream outToMasterServer = null;

	Socket masterSessionSocket = null;
	DataOutputStream masterSessionOutToServer = null;
	BufferedReader inFromSessionServer = null;

	BufferedReader inFromMasterServer = null;

	String sentence;
	String reply;

	int login = -1;

	public Savage2Login() {

		String modifiedSentence;
		BufferedReader inFromUser = new BufferedReader(new InputStreamReader(
				System.in));
		try {
			masterserverSocket = new Socket(MASTER_SERVER, 80);
			outToMasterServer = new DataOutputStream(
					masterserverSocket.getOutputStream());
			inFromMasterServer = new BufferedReader(new InputStreamReader(
					masterserverSocket.getInputStream()));
			/*
			 * // patcher request...
			 * System.out.println("Sending patcher request.."); reply =
			 * http_get_contents(MASTER_SERVER, getPatcherRequest());
			 * System.out.
			 * println("Received patcher reply..\n"+reply.substring(0,20));
			 * 
			 * // get persistent items...
			 * System.out.println("Get persistent items.."); reply =
			 * http_get_contents(MASTER_SERVER, getPersistentItemsRequest());
			 * System
			 * .out.println("Received persisten items reply..\n"+reply.substring
			 * (0,20));
			 * 
			 * // get friend info... System.out.println("Get friend info..");
			 * reply = http_get_contents(MASTER_SERVER, getFriendInfoRequest());
			 * System
			 * .out.println("Received friend info reply..\n"+reply.substring(0,
			 * 20));
			 */
			// send login request...
			try {
				Socket masterserverSocket = new Socket(MASTER_SERVER, 80);
				DataOutputStream outToMasterServer = new DataOutputStream(
						masterserverSocket.getOutputStream());
				BufferedReader inFromMasterServer = new BufferedReader(
						new InputStreamReader(
								masterserverSocket.getInputStream()));

				System.out.println("Sending login request..");
				outToMasterServer
						.writeBytes(getLoginRequest(USERNAME, PASSWORD));
				do {
					modifiedSentence = inFromMasterServer.readLine();
					if (modifiedSentence == null) {
						System.out
								.println("modifiedSentence == null! Aborting");
						System.exit(1);
					}
					// System.out.println("Received line from SERVER: " +
					// modifiedSentence);
				} while (!modifiedSentence.contains("account_id"));
				System.out.println("Account id line: " + modifiedSentence);
				// modifiedSentence = inFromServer.readLine();
				cookie = getCookieString(modifiedSentence);
				System.out.println("Cookie retrieved from master server: "
						+ cookie);
				login = 1;
			} catch (Exception e) {
				e.printStackTrace();
			}
			/*
			 * // clan roster...
			 * System.out.println("Sending clan_roster request to master server.."
			 * ); reply = http_get_contents(MASTER_SERVER,
			 * getClanRosterRequest()); System.out.println(
			 * "Received clan_roster reply from master server..\n"
			 * +reply.substring(0, 20));
			 */

			// send cookie..
			chatServerUp = false;
			/*
			 * try { System.out.println("Sending cookie to session server..");
			 * masterSessionSocket = new Socket(CHAT_SERVER, 11030);
			 * masterSessionOutToServer = new DataOutputStream(
			 * masterSessionSocket.getOutputStream()); inFromSessionServer = new
			 * BufferedReader(new InputStreamReader(
			 * masterSessionSocket.getInputStream()));
			 * masterSessionOutToServer.write(getSendCookieRequest(cookie)); int
			 * res = inFromSessionServer.read();
			 * System.out.println("sendCookie() response (usually 01) = " +
			 * res); if (res == -1) {
			 * System.out.println("Cannot connect to chat server.");
			 * chatServerUp = false; //System.out.println("Aborting");
			 * //System.exit(1); } } catch (Exception e) { e.printStackTrace();
			 * }
			 */

			// setup master session recvdata thread for incoming whisper
			// messages, etc.
			if (chatServerUp) {
				(new Thread(new Runnable() {
					public void run() {
						boolean execCommand = false;
						char[] recvDataSess = new char[1024];
						int dataLen = 0;
						InetAddress IPAddress = null;
						;
						try {
							IPAddress = InetAddress
									.getByName(GAME_SERVER_HOSTNAME);
						} catch (UnknownHostException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
							System.exit(1);
						}
						System.out
								.println("Entering session thread recv loop....");
						byte[] sendData;
						DatagramPacket sendPacket;
						short mainID = 0;
						while (true) {
							try {
								dataLen = inFromSessionServer.read(
										recvDataSess, 0, 1024);
								if (dataLen > 0) {
									System.out
											.println("FROM MASTER SESSION SERVER:");
									for (int i = 0; i < dataLen; ++i) {
										if (Character
												.isLetterOrDigit(recvDataSess[i]))
											System.out.print(recvDataSess[i]);
										else
											System.out.print(".");
									}
									System.out.println();

									// test command and control
									if (dataLen > 12 && recvDataSess[0] == 9) {
										int i;
										for (i = 1; i < 10; ++i) {
											if (BOTMASTER.charAt(i - 1) != recvDataSess[i])
												break;
										}
										if (i < 10)
											continue;
										if (dataLen >= 15) {
											switch (recvDataSess[11]) {
											case 'o': // 0x..
												String ori = new String(
														recvDataSess, 12, 4);
												Savage2GameServer
														.setOrientationByte(ori);
											}
										}
										if (dataLen >= 12)
											switch (recvDataSess[11]) {
											case 'z':
												printRecv = false;
												break;
											case 'j':
												byte team;
												int squadNo = 0;
												switch (recvDataSess[12]) {
												case '1':
													team = Savage2GameServer.JOIN_HUMANS;
													break;
												case '2':
													team = Savage2GameServer.JOIN_BEASTS;
													break;
												default:
													team = Savage2GameServer.JOIN_HUMANS;

												}
												Savage2GameServer
														.setCurrentTeam(team);
												boolean tryAll = false;
												switch (recvDataSess[13]) {
												case '0':
													squadNo = 0;
													break;
												case '1':
													squadNo = 1;
													break;
												case '2':
													squadNo = 2;
													break;
												case '3':
													squadNo = 3;
													break;
												default:
													tryAll = true;

												}
												System.out
														.println("Sending join team/squad request..");
												sendData = Savage2GameServer
														.getJoinTeam(
																clientID,
																team);
												sendPacket = new DatagramPacket(
														sendData,
														sendData.length,
														IPAddress,
														GAME_SERVER_PORT);
												sendReliablePacket(sendPacket);
												if (!tryAll) {
													sendData = Savage2GameServer
															.getJoinSquad(
																	clientID,
																	squadNo);
													sendPacket = new DatagramPacket(
															sendData,
															sendData.length,
															IPAddress,
															GAME_SERVER_PORT);
													sendReliablePacket(sendPacket);
												} else {
													sendData = Savage2GameServer
															.getJoinSquad(
																	clientID,
																	0);
													sendPacket = new DatagramPacket(
															sendData,
															sendData.length,
															IPAddress,
															GAME_SERVER_PORT);
													sendReliablePacket(sendPacket);
													sendData = Savage2GameServer
															.getJoinSquad(
																	clientID,
																	1);
													sendPacket = new DatagramPacket(
															sendData,
															sendData.length,
															IPAddress,
															GAME_SERVER_PORT);
													sendReliablePacket(sendPacket);
													sendData = Savage2GameServer
															.getJoinSquad(
																	clientID,
																	2);
													sendPacket = new DatagramPacket(
															sendData,
															sendData.length,
															IPAddress,
															GAME_SERVER_PORT);
													sendReliablePacket(sendPacket);
													sendData = Savage2GameServer
															.getJoinSquad(
																	clientID,
																	3);
													sendPacket = new DatagramPacket(
															sendData,
															sendData.length,
															IPAddress,
															GAME_SERVER_PORT);
													sendReliablePacket(sendPacket);
												}
												break;
											case 'x':
												// disconnect test
												System.out
														.println("Sending disconnect request..");
												sendData = Savage2GameServer
														.getGameServerDisconnect(clientID);
												sendPacket = new DatagramPacket(
														sendData,
														sendData.length,
														IPAddress,
														GAME_SERVER_PORT);
												sendReliablePacket(sendPacket);
												System.exit(0);
												break;
											case 's':
												// (re)spawn
												byte character;
												switch (recvDataSess[12]) {
												case 'q':
													character = Savage2GameServer.BUILDER;
													break;
												case 'w':
													character = Savage2GameServer.MARKSMAN;
													break;
												case 'e':
													character = Savage2GameServer.SAVAGE;
													break;
												case 'r':
													character = Savage2GameServer.CHAPLAIN;
													break;
												case 't':
													character = Savage2GameServer.LEGIONNAIRE;
													break;
												case 'y':
													character = Savage2GameServer.STEAMBUCHET;
													break;
												case 'u':
													character = Savage2GameServer.BATTERINGRAM;
													break;
												case 'z':
													character = Savage2GameServer.CONJURER;
													break;
												case 'x':
													character = Savage2GameServer.SHAPESHIFTER;
													break;
												case 'c':
													character = Savage2GameServer.HUNTER;
													break;
												case 'v':
													character = Savage2GameServer.SHAMAN;
													break;
												case 'b':
													character = Savage2GameServer.PREDATOR;
													break;
												case 'n':
													character = Savage2GameServer.BEHEMOTH;
													break;
												case 'm':
													character = Savage2GameServer.TEMPEST;
													break;

												case 'p':
													character = Savage2GameServer.MALPHAS;
													break;
												default:
													character = Savage2GameServer.BUILDER;
												}
												// select character test
												System.out
														.println("Sending select character request...");
												sendData = Savage2GameServer
														.getCharacterSelect(
																clientID,
																character);
												sendPacket = new DatagramPacket(
														sendData,
														sendData.length,
														IPAddress,
														GAME_SERVER_PORT);
												sendReliablePacket(sendPacket);

												if (Savage2GameServer
														.getCurrentTeam() == Savage2GameServer.JOIN_HUMANS)
													mainID = Savage2GameServer
															.getStrongholdID();
												else
													mainID = Savage2GameServer
															.getLairID();

												// spawn main test
												System.out
														.println("Sending spawn main request...");
												sendData = Savage2GameServer
														.getSpawnMainCommand(
																clientID,
																mainID);
												sendPacket = new DatagramPacket(
														sendData,
														sendData.length,
														IPAddress,
														GAME_SERVER_PORT);
												sendReliablePacket(sendPacket);

												hasSpawned.set(true);
												break;
											default:
											}
									}
								}
							} catch (IOException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}
					}
				})).start();
			}

			// get online..
			System.out.println("Sending get_online request to master server..");
			reply = Utility.http_get_contents(MASTER_SERVER,
					getGetOnlineRequest());
			System.out
					.println("Received get_online reply from master server..");

			// item list..
			/*
			 * System.out.println("Sending item list request to master server..")
			 * ; reply = http_get_contents(MASTER_SERVER, getItemListRequest());
			 * System.out
			 * .println("Received item list reply from master server..\n" +
			 * reply.substring(0, 20));
			 */

			// dont need masterserver anymore
			// clientSocket.close();

			connectToGameServer(GAME_SERVER_HOSTNAME, GAME_SERVER_PORT, cookie);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static String getPatcherRequest() {
		String req = "POST /patcher_1.4.php HTTP/1.1\r\n"
				+ "Host: masterserver.savage2.s2games.com\r\n"
				+ "User-Agent: PHP Script\r\n"
				+ "Content-Type: application/x-www-form-urlencoded\r\n"
				+ "Content-Length: 32\r\n" + "Connection: close\r\n\r\n"
				+ "version=2.1.1.0&os=wb6&arch=i686\r\n";
		return req;
	}

	public static String getPersistentItemsRequest() {
		String req = "GET /persist_test.php?f=get&nickname=" + USERNAME
				+ " HTTP/1.1\r\n"
				+ "Host: masterserver.savage2.s2games.com\r\n"
				+ "Accept: */*\r\n" + "Accept-Encoding: deflate, gzip\r\n\r\n";
		return req;
	}

	public static String getFriendInfoRequest() {
		String req = "GET /friend_info.php?nickname=" + USERNAME
				+ " HTTP/1.1\r\n"
				+ "Host: masterserver.savage2.s2games.com\r\n"
				+ "Accept: */*\r\n" + "Accept-Encoding: deflate, gzip\r\n\r\n";
		return req;
	}

	public static String getLoginRequest(String username, String password) {
		int length = username.length() + password.length()
				+ "f=auth&email=&password=".length();
		String req = "POST /irc_updater/irc_requester.php HTTP/1.1\r\n"
				+ "Host: masterserver.savage2.s2games.com\r\n"
				+ "User-Agent: PHP Script\r\n"
				+ "Content-Type: application/x-www-form-urlencoded\r\n"
				+ "Content-Length: " + Integer.toString(length) + "\r\n"
				+ "Connection: close\r\n" + "\r\n" + "f=auth&email=" + username
				+ "&password=" + password;
		return req;
	}

	public static String getClanRosterRequest() {
		String req = "POST /irc_updater/irc_requester.php HTTP/1.1\r\n"
				+ "Host: masterserver.savage2.s2games.com\r\n"
				+ "User-Agent: PHP Script\r\n"
				+ "Content-Type: application/x-www-form-urlencoded\r\n"
				+ "Content-Length: 38\r\n" + "Connection: close\r\n\r\n"
				+ "f=clan_roster&clan_name=Volcanic-Magma\r\n";
		return req;
	}

	public static byte[] getSendCookieRequest(String cookie) {
		// byte[] preamble = {00, 0x3a, 0x14, 0x0d, 0x00};
		// String preamble = "\00\0b7\2c\0b\00"; //no clan - old preamble
		byte[] preamble = { 0x00, (byte) 0x78, (byte) 0xe6, (byte) 0x0c, 0x00 };
		preamble[1] = (byte) accountId;
		preamble[2] = (byte) (accountId >> 8);
		preamble[3] = (byte) (accountId >> 16);
		preamble[4] = (byte) (accountId >> 24);
		byte[] req = new byte[preamble.length + cookie.length() + 1];
		int k = 0;
		for (int i = 0; i < preamble.length; ++i) {
			req[k++] = preamble[i];
		}
		for (int i = 0; i < cookie.length(); ++i) {
			req[k++] = (byte) cookie.charAt(i);
		}
		req[k] = 0;

		Utility.printBytes(req);

		return req;
	}

	public static String getItemListRequest() {
		String req = "POST /irc_updater/irc_requester.php HTTP/1.1\r\n"
				+ "Host: masterserver.savage2.s2games.com\r\n"
				+ "User-Agent: PHP Script\r\n"
				+ "Content-Type: application/x-www-form-urlencoded\r\n"
				+ "Content-Length: 29\r\n" + "Connection: close\r\n\r\n"
				+ "f=item_list&account_id=857146\r\n";
		return req;
	}

	public static String getGetOnlineRequest() {
		String req = "POST /irc_updater/svr_request_pub.php HTTP/1.1\r\n"
				+ "Host: masterserver.savage2.s2games.com\r\n"
				+ "User-Agent: PHP Script\r\n"
				+ "Content-Type: application/x-www-form-urlencoded\r\n"
				+ "Content-Length: 12\r\n" + "Connection: close\r\n\r\n"
				+ "f=get_online" + "\r\n";
		return req;
	}

	public static byte[] getServerConnectRequest() {
		// String s2magic = "\09a\0de\097\0f1";
		byte[] s2magic = { (byte) 0x9a, (byte) 0xde, (byte) 0x97, (byte) 0xf1 };
		// String unknown1 = "\01";
		byte unknown1 = 0x01;
		// String unknown2 = "\0a3\01b"; // these 2 bytes are usually different
		byte[] unknown2 = clientID;
		// String marker = "\0c0";
		byte marker = (byte) 0xc0;
		String magic = "S2_K2_CONNECT";
		String version = "2.1.1.0";
		String unknown1s = unknown1 + "\00";
		// String fixed2 = "\0b7\02c\0b\00"; // for old no clan packets
		// String clanName = "Volcanic-Magma";
		String clanName = "";

		byte[] req = new byte[s2magic.length + 1 + 2 + 1 + magic.length() + 1
				+ version.length() + 1 + 4 + 4 + clanName.length() + 1];
		int k = 0;
		for (int i = 0; i < s2magic.length; ++i)
			req[k++] = s2magic[i];
		req[k++] = unknown1;
		req[k++] = unknown2[0];
		req[k++] = unknown2[1];
		req[k++] = marker;
		for (int i = 0; i < magic.length(); ++i)
			req[k++] = (byte) magic.charAt(i);
		req[k++] = 0;
		for (int i = 0; i < version.length(); ++i)
			req[k++] = (byte) version.charAt(i);
		req[k++] = 0;
		req[k++] = unknown1;
		req[k++] = 0;
		req[k++] = unknown2[0];
		req[k++] = unknown2[1];
		for (int i = 0; i < 4; ++i)
			req[k++] = (byte) (accountId >> (8 * i));
		for (int i = 0; i < clanName.length(); ++i)
			req[k++] = (byte) clanName.charAt(i);
		req[k++] = 0;
		return req;
	}

	public String getCookieString(String response) {
		String searchstr = "s:6:\"cookie\";s:32:";
		int cookieStrIndex = response.indexOf(searchstr) + searchstr.length()
				+ 1;
		return response.substring(cookieStrIndex, cookieStrIndex + 32);
	}

	/*
	 * public void sendCookie(String cookie) { String sentence; String
	 * modifiedSentence; BufferedReader inFromUser = new BufferedReader(new
	 * InputStreamReader( System.in)); try { masterSessionSocket = new
	 * Socket(CHAT_SERVER, 11030); masterSessionOutToServer = new
	 * DataOutputStream( masterSessionSocket.getOutputStream());
	 * inFromSessionServer = new BufferedReader(new InputStreamReader(
	 * masterSessionSocket.getInputStream()));
	 * masterSessionOutToServer.write(getSendCookieRequest(cookie)); int res =
	 * inFromSessionServer.read(); System.out.println("sendCookie() response = "
	 * + res); // should be // 01 } catch (Exception e) { e.printStackTrace(); }
	 * }
	 */

	boolean hasMainID = false;
	boolean printRecv = true;
	boolean sendPings = true;
	boolean readyToSpawn = false;

	public void setHasMainID(boolean x) {
		hasMainID = x;
	}

	public void setPrintRecv(boolean x) {
		printRecv = x;
	}

	public void setSendPings(boolean x) {
		sendPings = x;
	}

	public static byte[] getSendNetInfoRequest(String cookie) {
		// 1st 4 bytes are msgcounter
		byte[] u1b12 = { 1, 0, 0, 0, 3, (byte) 0xff, 8, (byte) 0xc1,
				(byte) 0x85, 0, 0, 0 };
		u1b12[5] = clientID[0];
		u1b12[6] = clientID[1];
		String netFPS = "net_FPS";
		byte separator = (byte) 0xFF;
		String fps = "20";
		String netCookie = "net_cookie";
		String netMaxBPS = "net_maxBPS";
		String maxBPS = "2000";
		String netMaxPacketSize = "net_maxPacketSize";
		String maxPacketSize = "1300";
		String netName = "net_name";
		String netSendCvars = "net_sendCvars";
		String sendCvars = "true";

		byte[] res = new byte[u1b12.length + netFPS.length() + fps.length()
				+ cookie.length() + netCookie.length() + netMaxBPS.length()
				+ maxBPS.length() + netMaxPacketSize.length()
				+ maxPacketSize.length() + netName.length() + USERNAME.length()
				+ netSendCvars.length() + sendCvars.length() + 12 + 1];
		int k = 0;
		for (int i = 0; i < u1b12.length; ++i) {
			res[k++] = u1b12[i];
		}
		for (int i = 0; i < netFPS.length(); ++i)
			res[k++] = (byte) netFPS.charAt(i);
		res[k++] = separator;
		for (int i = 0; i < fps.length(); ++i)
			res[k++] = (byte) fps.charAt(i);
		res[k++] = separator;
		for (int i = 0; i < netCookie.length(); ++i)
			res[k++] = (byte) netCookie.charAt(i);
		res[k++] = separator;
		for (int i = 0; i < cookie.length(); ++i)
			res[k++] = (byte) cookie.charAt(i);
		res[k++] = separator;
		for (int i = 0; i < netMaxBPS.length(); ++i)
			res[k++] = (byte) netMaxBPS.charAt(i);
		res[k++] = separator;
		for (int i = 0; i < maxBPS.length(); ++i)
			res[k++] = (byte) maxBPS.charAt(i);
		res[k++] = separator;
		for (int i = 0; i < netMaxPacketSize.length(); ++i)
			res[k++] = (byte) netMaxPacketSize.charAt(i);
		res[k++] = separator;
		for (int i = 0; i < maxPacketSize.length(); ++i)
			res[k++] = (byte) maxPacketSize.charAt(i);
		res[k++] = separator;
		for (int i = 0; i < netName.length(); ++i)
			res[k++] = (byte) netName.charAt(i);
		res[k++] = separator;
		for (int i = 0; i < USERNAME.length(); ++i)
			res[k++] = (byte) USERNAME.charAt(i);
		res[k++] = separator;
		for (int i = 0; i < netSendCvars.length(); ++i)
			res[k++] = (byte) netSendCvars.charAt(i);
		res[k++] = separator;
		for (int i = 0; i < sendCvars.length(); ++i)
			res[k++] = (byte) sendCvars.charAt(i);
		res[k++] = separator;
		res[k++] = (byte) 0xC2;
		return res;
	}

	public void connectToGameServer(String hostname, int port, String cookie)
			throws Exception {
		DatagramSocket clientSocket = new DatagramSocket();
		gameServerClientSocket = clientSocket;
		InetAddress IPAddress = InetAddress.getByName(hostname);

		byte[] sendData = new byte[1024];
		DatagramPacket sendPacket;

		byte[] receiveData = new byte[1024];
		DatagramPacket receivePacket = new DatagramPacket(receiveData,
				receiveData.length);

		sendData = Savage2GameServer.getGameServerDisconnect(clientID);
		sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress,
				port);
		clientSocket.send(sendPacket);

		System.out.println("Sending connect request to game server..");
		sendData = getServerConnectRequest();
		sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress,
				port);
		Utility.printBytes(sendData);
		clientSocket.send(sendPacket);

		if (chatServerUp) {
			byte[] b = { 0x10, 0x0f, 0x00, 0x00, 0x00 };
			System.out.println("Sending 5 bytes to chat server..");
			Utility.printBytes(b);
			masterSessionOutToServer.write(b);
		}

		System.out.println("Waiting for reply from game server..");
		clientSocket.receive(receivePacket);
		System.out.print("FROM SERVER:");
		Utility.printBytes(receivePacket.getData(), receivePacket.getLength());

		lastAckSent.set(1);
		
		sendData = getSendNetInfoRequest(cookie);
		sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress,
				port);
		System.out.println("Sending net info to game server..");
		// clientSocket.send(sendPacket);
		sendReliablePacket(sendPacket);

		// setup thread to handle reliable packets
		(new Thread(new Runnable() {
			public void run() {
				byte[] magic = { (byte) 0x9A, (byte) 0xDE, (byte) 0x97,
						(byte) 0xF1 };
				byte ackMagic = 5;
				byte gamMagic = 1;
				try {
					InetAddress IPAddress = InetAddress
							.getByName(GAME_SERVER_HOSTNAME);
					int port = GAME_SERVER_PORT;
					DatagramPacket sendPacket;
					byte[] receiveData = new byte[8 * 1024];
					DatagramPacket receivePacket = new DatagramPacket(
							receiveData, receiveData.length);
					while (true) {
						gameServerClientSocket.receive(receivePacket);
						receiveData = receivePacket.getData();
						//System.out.println("Printing received bytes " + receivePacket.getLength());
						//Utility.dumpBytes(receiveData,
						//		receivePacket.getLength());
						if (printRecv) {
							System.out
							.println("Received response from game server...");
							System.out.print("FROM SERVER: ");
							// Utility.printBytes(receivePacket.getData(),
							// receivePacket.getLength());
							Utility.dumpBytes(receiveData,
									receivePacket.getLength());
						}

						if (receivePacket.getLength() > 5) {
							int i;
							for (i = 0; i < magic.length; ++i)
								if (receiveData[i] != magic[i])
									break;
							if (i == magic.length) {
								if (receiveData[i] == ackMagic) {
									i += 3; // skip client 2 bytes
									ByteBuffer bb = ByteBuffer.allocate(4);
									bb.order(ByteOrder.LITTLE_ENDIAN);
									bb.put(receiveData[i]);
									bb.put(receiveData[i + 1]);
									bb.put(receiveData[i + 2]);
									bb.put(receiveData[i + 3]);
									int ack = bb.getInt(0);System.out.println("setting recv ack to " + ack);
									lastAckReceived.set(ack);
									System.out.println("[LOCAL_CLIENT] Received ACK #" + ack);
									/*
									 * if(c ==
									 * Savage2GameServer.getMsgCounter()) { //
									 * received ACK for our packet, no re-send,
									 * inc. // counter Savage2GameServer.next();
									 * } else { // resend }
									 */
								}
							} else {
								// not an in-game packet
								// first 4 bytes are sequence number, send
								// ACK
								// to
								// server
								byte[] ack = new byte[magic.length + 3 + 4];
								int k = 0;
								for (i = 0; i < magic.length; ++i)
									ack[k++] = magic[i];
								ack[k++] = ackMagic;
								ack[k++] = clientID[0];
								ack[k++] = clientID[1];
								ack[k++] = receiveData[0];
								ack[k++] = receiveData[1];
								ack[k++] = receiveData[2];
								ack[k] = receiveData[3];

								ByteBuffer bb = ByteBuffer.allocate(4);
								bb.order(ByteOrder.LITTLE_ENDIAN);
								bb.put(receiveData[0]);
								bb.put(receiveData[1]);
								bb.put(receiveData[2]);
								bb.put(receiveData[3]);
								int n = bb.getInt(0);
								//System.out.println("Sent ack for #"
								//		+ n);
								System.out.println("[LOCAL_CLIENT] Received reliable packet #"
										+ n + ", expecting #" + lastAckSent.get());
								lastAckSent.set(n + 1);
								sendPacket = new DatagramPacket(ack,
										ack.length, IPAddress, port);					
								gameServerClientSocket.send(sendPacket);
							}
						}
						// send packets to packet handler method
						handlePacket(receiveData, receivePacket.getLength());
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		})).start();
		/*
		 * System.out.println("Received response from game server...");
		 * clientSocket.receive(receivePacket);
		 * System.out.print("FROM SERVER: ");
		 * Utility.printBytes(receivePacket.getData(),
		 * receivePacket.getLength());
		 * 
		 * System.out.println("Sending server map name request..."); sendData =
		 * Savage2GameServer.getServerMapName(unknown2bytes); sendPacket = new
		 * DatagramPacket(sendData, sendData.length, IPAddress, port);
		 * clientSocket.send(sendPacket); Savage2GameServer.next();
		 * 
		 * System.out.println("Sending server connect request..."); sendData =
		 * Savage2GameServer.getServerConnect(unknown2bytes); sendPacket = new
		 * DatagramPacket(sendData, sendData.length, IPAddress, port);
		 * clientSocket.send(sendPacket); Savage2GameServer.next();
		 */

		System.out.println("Sending server connect request...");
		sendData = Savage2GameServer.getServerConnect(clientID);
		sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress,
				port);
		sendReliablePacket(sendPacket);

		// now nickname should appear in game server lobby //

		while (!hasSpawned.get()) {
		}
		// Savage2GameServer.setOrientationByte("0xB0");
		Savage2GameServer.setTestPacketCounter(Savage2GameServer.pkt5dval1 + 0x600);
		
		/*
		for(int h = 0;h < 3; ++h) {
		Thread.sleep(3000);
		ByteBuffer bb = ByteBuffer.allocate(4);
		bb.order(ByteOrder.LITTLE_ENDIAN);
		bb.put((byte)0x5C);
		bb.put((byte)0x08);
		bb.put((byte)0xB5);
		bb.put((byte)0x46);
		float x = bb.getFloat(0);
		bb.rewind();
		bb.put((byte)0x7E);
		bb.put((byte)0x4D);
		bb.put((byte)0x1E);
		bb.put((byte)0x46);
		float y = bb.getFloat(0);
		bb.rewind();
		System.out.println("Ping at "+ String.format("%.4f", x) + ", " + String.format("%.4f", y));
		sendData = Savage2GameServer.getPingMinimapRequest(unknown2bytes, x, y);
		sendPacket = new DatagramPacket(sendData, sendData.length,
				IPAddress, port);
		clientSocket.send(sendPacket);
		}
		*/
		
		//vc
		for(int i = 0;i < 1; ++i) {
		sendData = Savage2GameServer.getVoiceCommand(111, clientID); 
		sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, port);
		sendReliablePacket(sendPacket);
		}
		
		System.out.println("Entering test packet request loop...");
		int movement = 1;
		while (true) {
			// test packet - fuzzed
			//System.out.println("Sending test packet request...");
			//sendData = Savage2GameServer.getTestPacket(clientID,
			//		++testAction);
			testAction = Savage2GameServer.MOVE_FORWARD * 2;
			sendData = Savage2GameServer.getActionPacket(clientID, testAction, movement);
			movement += 0x7F;
			// System.out.println("testAction=" + testAction);
			sendPacket = new DatagramPacket(sendData, sendData.length,
					IPAddress, port);
			// sendReliablePacket(sendPacket);
			clientSocket.send(sendPacket);
			Thread.sleep(50);
			// clientSocket.send(sendPacket);
			// sendPings = false; // causes some sort of flood - even
			// with action pkt seq nos
			// if(testAction == (byte)0xE0) testAction = 0;
			// if (testAction == 0)
			// testAction = -1;
		}

		
		
		/*
		 * // vc test System.out.println("Sending vc test request..."); sendData
		 * = Savage2GameServer.getVoiceCommand(119, unknown2bytes); sendPacket =
		 * new DatagramPacket(sendData, sendData.length, IPAddress, port);
		 * clientSocket.send(sendPacket); Savage2GameServer.next();
		 */
		// ////

		// clientSocket.setSoTimeout(5000);

		// setup game server udp recv thread
		/*
		 * (new Thread(new Runnable() { public void run() { byte[] receiveData =
		 * new byte[1024]; DatagramPacket receivePacket = new
		 * DatagramPacket(receiveData, receiveData.length); try { while (true) {
		 * gameServerClientSocket.receive(receivePacket); byte[] recvData =
		 * receivePacket.getData(); if (printRecv) { System.out
		 * .println("Received response from game server...");
		 * System.out.print("FROM SERVER: \n"); // printASCIIBytes(recvData);
		 * dumpBytes(recvData); }
		 * 
		 * // see if data contains stronghold/lair id if (!hasMainID) {
		 * System.out .println("Checking for main IDs in recvData of length " +
		 * recvData.length); Savage2GameServer.getStrongholdLairIDs(recvData);
		 * if (Savage2GameServer.getStrongholdID() != 0) { // lairID =
		 * Savage2GameServer.getLairIDBytes(); hasMainID = true; //
		 * System.out.println("<<< FOUND STRONGHOLD/LAIR ID >>>"); //
		 * printBytes(strongholdID); // printBytes(lairID); printRecv = false;
		 * //sendPings = false; } } } } catch (IOException e) { // TODO
		 * Auto-generated catch block e.printStackTrace(); }
		 * 
		 * } })).start();
		 */
		/*
		 * byte testAction = 0; while (true) { try { sendData = req;
		 * 
		 * if (sendPings) { sendPacket = new DatagramPacket(sendData,
		 * sendData.length, IPAddress, port); //
		 * System.out.println("Sending ping packet game server. SeqNo = " // +
		 * seqNo); clientSocket.send(sendPacket);
		 * clientSocket.receive(receivePacket); byte[] recvData =
		 * receivePacket.getData(); if (printRecv) { System.out
		 * .println("Received response from game server...");
		 * System.out.print("FROM SERVER: \n"); // printASCIIBytes(recvData);
		 * Utility.dumpBytes(recvData, receivePacket.getLength()); }
		 * 
		 * // see if data contains stronghold/lair id if (!hasMainID) {
		 * System.out .println("Checking for main IDs in recvData of length " +
		 * recvData.length); Savage2GameServer.getStrongholdLairIDs(recvData);
		 * if (Savage2GameServer.getStrongholdID() != 0) { // lairID =
		 * Savage2GameServer.getLairIDBytes(); hasMainID = true; System.out
		 * .println("<<< FOUND STRONGHOLD/LAIR ID >>>");
		 * System.out.println(Savage2GameServer .getStrongholdID());
		 * System.out.println(Savage2GameServer.getLairID()); printRecv = false;
		 * // sendPings = false; } } } // Thread.sleep(250);
		 * 
		 * if (hasMainID && !hasSpawned) { // join team 1 test
		 * System.out.println("Sending join team 1 request..."); sendData =
		 * Savage2GameServer.getJoinTeam(unknown2bytes,
		 * Savage2GameServer.JOIN_HUMANS); sendPacket = new
		 * DatagramPacket(sendData, sendData.length, IPAddress, port);
		 * clientSocket.send(sendPacket); Savage2GameServer.next();
		 * 
		 * // join squad 1 test
		 * System.out.println("Sending join squad request..."); sendData =
		 * Savage2GameServer.getJoinSquad(unknown2bytes, 0); sendPacket = new
		 * DatagramPacket(sendData, sendData.length, IPAddress, port);
		 * clientSocket.send(sendPacket); Savage2GameServer.next();
		 * 
		 * sendData = Savage2GameServer.getJoinSquad(unknown2bytes, 1);
		 * sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress,
		 * port); clientSocket.send(sendPacket); Savage2GameServer.next();
		 * 
		 * sendData = Savage2GameServer.getJoinSquad(unknown2bytes, 2);
		 * sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress,
		 * port); clientSocket.send(sendPacket); Savage2GameServer.next();
		 * 
		 * // select builder test
		 * System.out.println("Sending select builder request..."); sendData =
		 * Savage2GameServer.getCharacterSelect( unknown2bytes,
		 * Savage2GameServer.SHAPESHIFTER); sendPacket = new
		 * DatagramPacket(sendData, sendData.length, IPAddress, port);
		 * clientSocket.send(sendPacket); Savage2GameServer.next();
		 * 
		 * // spawn main test short mainID = Savage2GameServer.getLairID();
		 * System.out.println("Sending spawn main at " + mainID +
		 * " request..."); sendData = Savage2GameServer.getSpawnMainCommand(
		 * unknown2bytes, mainID); sendPacket = new DatagramPacket(sendData,
		 * sendData.length, IPAddress, port); clientSocket.send(sendPacket);
		 * Savage2GameServer.next();
		 * 
		 * hasSpawned = true; }
		 * 
		 * if (hasSpawned) { // test packet - fuzzed //
		 * System.out.println("Sending test packet request..."); sendData =
		 * Savage2GameServer.getTestPacket(unknown2bytes, ++testAction);
		 * System.out.println("testAction=" + testAction); sendPacket = new
		 * DatagramPacket(sendData, sendData.length, IPAddress, port);
		 * clientSocket.send(sendPacket); // clientSocket.send(sendPacket); //
		 * clientSocket.send(sendPacket); // sendPings = false; // causes some
		 * sort of flood - even // with action pkt seq nos if (testAction == 0)
		 * testAction = -1; }
		 * 
		 * req[7] = (byte) ++seqNo; req[8] = (byte) ((seqNo & 0xFF00) >> 8);
		 * req[9] = (byte) ((seqNo & 0xFF0000) >> 16); req[10] = (byte) ((seqNo
		 * & 0xFF000000) >> 24); } catch (java.net.SocketTimeoutException e) {
		 * ++seqNo; } }
		 */
		// clientSocket.close();
	}

	public class SynchronizedBoolean {
		private boolean b = false;

		public synchronized void set(boolean val) {
			b = val;
		}

		public synchronized boolean get() {
			return b;
		}
	}

	SynchronizedBoolean hasSpawned = new SynchronizedBoolean();

	public class SynchronizedCounter {
		private int c = 0;
		boolean updated = false;

		public synchronized void set(int val) {
			c = val;
			updated = true;
		}

		public synchronized int get() {
			updated = false;
			return c;
		}

		public synchronized boolean wasUpdated() {
			return updated;
		}
	}

	SynchronizedCounter lastAckReceived = new SynchronizedCounter(); // from server
	SynchronizedCounter lastAckSent = new SynchronizedCounter(); // to server
	
	DatagramPacket lastPacket = null;
	boolean isFirstPacket = true;

	void sendReliablePacket(DatagramPacket sendPacket) {
		DatagramSocket clientSocket = gameServerClientSocket;
		try {
			/*
			 * if(sentFirstPacket) while (lastReceivedAck !=
			 * Savage2GameServer.getMsgCounter()) {}
			 * clientSocket.send(sendPacket);
			 */

			// Savage2GameServer.next();
			// clientSocket.send(sendPacket);

			int x, y;
			do {
				/*while*/if (!isFirstPacket && !lastAckReceived.wasUpdated()) {
					//System.out.println("DOH " + lastAckReceived.get());
					try {
						Thread.sleep(50);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				x = lastAckReceived.get();
				if (!isFirstPacket
						&& x != Savage2GameServer.getMsgCounter() - 1) {
					//Utility.printBytes(lastPacket.getData(),
					//		lastPacket.getLength());
					ByteBuffer bb = ByteBuffer.allocate(4);
					bb.order(ByteOrder.LITTLE_ENDIAN);
					bb.put(lastPacket.getData()[0]);
					bb.put(lastPacket.getData()[1]);
					bb.put(lastPacket.getData()[2]);
					bb.put(lastPacket.getData()[3]);
					int lastN = bb.getInt(0);
					System.out.println("[LOCAL_CLIENT] Sending reliable packet #" 
							+ lastN);
					clientSocket.send(lastPacket);
				}
			} while (!isFirstPacket
					&& /*lastAckReceived.get()*/x != Savage2GameServer
							.getMsgCounter() - 1);
			y = Savage2GameServer.getMsgCounter();
			//System.out.println("Sending packet: "
			//		+ y);
			System.out.println("[LOCAL_CLIENT] Sending reliable packet #" + y);
			clientSocket.send(sendPacket);
			lastPacket = sendPacket;
			Savage2GameServer.next();
			/*
			 * do { clientSocket.send(sendPacket); } while (!isFirstPacket &&
			 * lastAckReceived.get() != Savage2GameServer .getMsgCounter() - 1);
			 * 
			 * Savage2GameServer.next();
			 */
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	byte testAction = 0;
	boolean receivedPkt3 = false;
	boolean waitingFor5bPkt = false;

	boolean joinTeam = false;
	boolean characterSelected = false;
	void handlePacket(byte[] recvData, int recvDataLen) {
		InetAddress IPAddress;
		try {
			IPAddress = InetAddress.getByName(GAME_SERVER_HOSTNAME);
			byte[] sendData = new byte[1024];
			DatagramPacket sendPacket;
			int port = GAME_SERVER_PORT;
			

			if(characterSelected && Savage2GameServer.parseAllChatCamrose(recvData, recvDataLen)) {
				// spawn test
				short spawnID = Savage2GameServer.getPortalId() ;//Savage2GameServer.getStrongholdID();
				System.out.println("Sending spawn at " + String.format("%04X", spawnID)
						+ " request...");
				sendData = Savage2GameServer.getSpawnMainCommand(clientID,
						spawnID);
				sendPacket = new DatagramPacket(sendData, sendData.length,
						IPAddress, port);
				sendReliablePacket(sendPacket);
				
				hasSpawned.set(true);
			}
			
			// see if data contains stronghold/lair id
			if (!hasMainID) {
				System.out
						.println("Checking for main IDs in recvData of length "
								+ recvDataLen);
				Savage2GameServer.getStrongholdLairIDs(recvData);
				if (Savage2GameServer.getStrongholdID() != 0) {
					// lairID = Savage2GameServer.getLairIDBytes();
					hasMainID = true;
					System.out.println("<<< FOUND STRONGHOLD/LAIR ID >>>");
					System.out.println(Savage2GameServer.getStrongholdID());
					System.out.println(Savage2GameServer.getLairID());
					// printRecv = false;
					// sendPings = false;
					////readyToSpawn = true;
				}
			}

			if (readyToSpawn && hasMainID && !hasSpawned.get()) {
				joinTeam = true;
			}
			Savage2GameServer.parse602101(recvData, recvDataLen);
			if (readyToSpawn && hasMainID && !characterSelected && !hasSpawned.get()) {
				short iSpawn = Savage2GameServer.getStrongholdID();//0x18A2;
				iSpawn += 0;

				/*

				        // snowblind2 sh lair 0x2190 0x2191
				// snowblind 2 non-main spawn 0x202B
				        //0x18A2, 0x18A1 hyren2 sh and lair 
						//0x17C8, 0x17B0; // hyren2 non-main spawn points
		                //0x28AB, 0x28AA hyren2 sh and lair  (2nd run)
				        //0x27B9 hyren2 mine at sh (2nd run)
				// 0x12D5;
				 * */

				//for(short i = (short)(iSpawn); i < iSpawn + 1; ++i) {

				// join team test
				System.out.println("Sending join team request...");
				sendData = Savage2GameServer.getJoinTeam(clientID,
						Savage2GameServer.JOIN_BEASTS);
				sendPacket = new DatagramPacket(sendData, sendData.length,
						IPAddress, port);
				sendReliablePacket(sendPacket);
/*
				// join squad 1 test
				System.out.println("Sending join squad request...");
				sendData = Savage2GameServer.getJoinSquad(clientID, 0);
				sendPacket = new DatagramPacket(sendData, sendData.length,
						IPAddress, port);
				sendReliablePacket(sendPacket);
/*

				sendData = Savage2GameServer.getJoinSquad(clientID, 2);
				sendPacket = new DatagramPacket(sendData, sendData.length,
						IPAddress, port);
				sendReliablePacket(sendPacket);
				//gameServerClientSocket.send(sendPacket);
				//Savage2GameServer.next();

				sendData = Savage2GameServer.getJoinSquad(clientID, 3);
				sendPacket = new DatagramPacket(sendData, sendData.length,
						IPAddress, port);
				sendReliablePacket(sendPacket);
				//gameServerClientSocket.send(sendPacket);
				//Savage2GameServer.next();
*/
				
				// select character
				System.out.println("Sending select character request...");
				sendData = Savage2GameServer.getCharacterSelect(clientID,
						Savage2GameServer.SAVAGE);
				sendPacket = new DatagramPacket(sendData, sendData.length,
						IPAddress, port);
				sendReliablePacket(sendPacket);
				
				characterSelected = true;
/*
				// after character select
				System.out.println("Sending after select character request...");
				sendData = Savage2GameServer
						.getAfterCharacterSelect(clientID);
				sendPacket = new DatagramPacket(sendData, sendData.length,
						IPAddress, port);
				sendReliablePacket(sendPacket);
				//gameServerClientSocket.send(sendPacket);
				//Savage2GameServer.next();
*/


				/*
				//allchat
				sendData = Savage2GameServer.getAllChatMessageCommand(String.format("%04X", i), clientID); 
				sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, port);
				sendReliablePacket(sendPacket);
				

				*/
				/*
				}
				
				try {
					Thread.sleep(4000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				sendData = Savage2GameServer.getGameServerDisconnect(clientID);
				sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress,
						port);
				sendReliablePacket(sendPacket);
				System.exit(0);
				*/
				

			}

			
			// just to keep the 5b packets coming - experimental
			//sendData = Savage2GameServer.getActionPacket(clientID,
			//		(byte)0);
			sendData = Savage2GameServer.getTestPacket(clientID,
					(byte)0);
			
			sendPacket = new DatagramPacket(sendData, sendData.length,
					IPAddress, port);
			gameServerClientSocket.send(sendPacket);
			
			
			// check if received login expired error packet
			byte[] magic = { (byte) 0x9A, (byte) 0xDE, (byte) 0x97, (byte) 0xF1 };
			byte gamMagic = 1;
			String errorMsg = "Your login has expired";
			if (recvData.length > 16) {
				int i = 0;
				for (; i < magic.length; ++i) {
					if (recvData[i] != magic[i])
						break;
				}
				if (i == magic.length) {
					if (recvData[i] == gamMagic && recvData[i + 3] == 5) {
						i += 3;
						int j;
						for (j = 0; j < errorMsg.length(); ++j) {
							if (recvData[++i] != (byte) errorMsg.charAt(j))
								break;
						}
						if (j == errorMsg.length()) {
							// login expired error packet, send disconnect
							System.out
									.println("Received login expired error. Sending disconnect..");
							sendData = Savage2GameServer
									.getGameServerDisconnect(clientID);
							sendPacket = new DatagramPacket(sendData,
									sendData.length, IPAddress, port);
							gameServerClientSocket.send(sendPacket);
							System.exit(1);
						}
					}
				}
			}

			boolean isPkt5b = Savage2GameServer.parsePkt5b(clientID,
					recvData, recvDataLen);
			if (isPkt5b) {
				waitingFor5bPkt = false;
				readyToSpawn = true;
				printRecv = false;
				//Utility.dumpBytes(recvData, recvDataLen);
			}

			boolean isPkt5e = Savage2GameServer.parsePkt5e(clientID,
					recvData);

			if (isPkt5e ) {
				System.out.println("Setting up requests to receive 5b pkts..");

				sendData = new byte[1];
				sendData[0] = 0x11;
				sendPacket = new DatagramPacket(sendData, sendData.length,
						IPAddress, port);
				gameServerClientSocket.send(sendPacket);

				byte[] sendData1 = 
					{ (byte) 0x9A, (byte) 0xDE, (byte) 0x97, (byte) 0xF1, 1, 
						0, 0, 
						(byte) 0xC7, 0, 0, 0, 0, 
						0, 0, 0, 0, 
						0, 0, 0, 0, (byte) 0xFF, 0
						};
				sendData1[5] = clientID[0];
				sendData1[6] = clientID[1];
				int val1 = Savage2GameServer.pkt5eval1;
				int val2 = Savage2GameServer.pkt5dval2;
				for (int i = 0; i < 4; ++i)
					sendData1[8 + i] = (byte) (val1 >> (8 * i));
				for (int i = 0; i < 4; ++i)
					sendData1[12 + i] = (byte) (val2 >> (8 * i));
				sendPacket = new DatagramPacket(sendData1, sendData1.length,
						IPAddress, port);
				gameServerClientSocket.send(sendPacket);
				waitingFor5bPkt = true;
			}
			
			if(!readyToSpawn && waitingFor5bPkt) {
				byte[] sendData1 = 
					{ (byte) 0x9A, (byte) 0xDE, (byte) 0x97, (byte) 0xF1, 1, 
						0, 0, 
						(byte) 0xC7, 0, 0, 0, 0, 
						0, 0, 0, 0, 
						0, 0, 0, 0, (byte) 0xFF, 0
						};
				sendData1[5] = clientID[0];
				sendData1[6] = clientID[1];
				int val1 = Savage2GameServer.pkt5eval1;
				Savage2GameServer.pkt5dval2 += 0x30;//0x40//0x20;
				int val2 = Savage2GameServer.pkt5dval2;
				for (int i = 0; i < 4; ++i)
					sendData1[8 + i] = (byte) (val1 >> (8 * i));
				for (int i = 0; i < 4; ++i)
					sendData1[12 + i] = (byte) (val2 >> (8 * i));
				sendPacket = new DatagramPacket(sendData1, sendData1.length,
						IPAddress, port);
				System.out.println("Sending new packet hoping for pkt5b..");
				Utility.dumpBytes(sendData1);
				gameServerClientSocket.send(sendPacket);
			}

		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException ioe) {
			ioe.printStackTrace();
		}
	}

}