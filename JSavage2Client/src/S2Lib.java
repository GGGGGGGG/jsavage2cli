import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public abstract class S2Lib {
	enum State {
		INLOBBY, INSPEC, INTEAM, LOADOUT, SPAWNSCREEN, ONFIELD
	}

	SynchronizedState currentState = new SynchronizedState();
	SynchronizedInt portalID = new SynchronizedInt();

	final static String MASTER_SERVER = "masterserver.savage2.s2games.com";
	final static String CHAT_SERVER = "216.127.51.198";
	boolean chatServerUp = true;

	static String USERNAME = null;
	static String PASSWORD = null;
	static int accountId = 0;

	static DatagramSocket gameServerClientSocket = null;
	static String GAME_SERVER_HOSTNAME = null;
	static int GAME_SERVER_PORT = 0;

	final static String BOTMASTER = null; // nickname of user controlling the
											// client

	static byte[] clientID = { (byte) 0xFE, 0x08 }; // seemingly generated by
													// client

	String cookie = null;

	Socket masterserverSocket = null;
	DataOutputStream outToMasterServer = null;

	Socket masterSessionSocket = null;
	DataOutputStream masterSessionOutToServer = null;
	BufferedReader inFromSessionServer = null;

	BufferedReader inFromMasterServer = null;

	String sentence;
	String reply;

	int login = -1;

	public S2Lib() {
		// Initialisations
		portalID.set(0);
	}

	public static String getPatcherRequest() {
		String req = "POST /patcher_1.4.php HTTP/1.1\r\n"
				+ "Host: masterserver.savage2.s2games.com\r\n"
				+ "User-Agent: PHP Script\r\n"
				+ "Content-Type: application/x-www-form-urlencoded\r\n"
				+ "Content-Length: 32\r\n" + "Connection: close\r\n\r\n"
				+ "version=2.1.1.0&os=wb6&arch=i686\r\n";
		return req;
	}

	public static String getPersistentItemsRequest() {
		String req = "GET /persist_test.php?f=get&nickname=" + USERNAME
				+ " HTTP/1.1\r\n"
				+ "Host: masterserver.savage2.s2games.com\r\n"
				+ "Accept: */*\r\n" + "Accept-Encoding: deflate, gzip\r\n\r\n";
		return req;
	}

	public static String getFriendInfoRequest() {
		String req = "GET /friend_info.php?nickname=" + USERNAME
				+ " HTTP/1.1\r\n"
				+ "Host: masterserver.savage2.s2games.com\r\n"
				+ "Accept: */*\r\n" + "Accept-Encoding: deflate, gzip\r\n\r\n";
		return req;
	}

	public static String getLoginRequest(String username, String password) {
		int length = username.length() + password.length()
				+ "f=auth&email=&password=".length();
		String req = "POST /irc_updater/irc_requester.php HTTP/1.1\r\n"
				+ "Host: masterserver.savage2.s2games.com\r\n"
				+ "User-Agent: PHP Script\r\n"
				+ "Content-Type: application/x-www-form-urlencoded\r\n"
				+ "Content-Length: " + Integer.toString(length) + "\r\n"
				+ "Connection: close\r\n" + "\r\n" + "f=auth&email=" + username
				+ "&password=" + password;
		return req;
	}

	public static String getClanRosterRequest() {
		String req = "POST /irc_updater/irc_requester.php HTTP/1.1\r\n"
				+ "Host: masterserver.savage2.s2games.com\r\n"
				+ "User-Agent: PHP Script\r\n"
				+ "Content-Type: application/x-www-form-urlencoded\r\n"
				+ "Content-Length: 38\r\n" + "Connection: close\r\n\r\n"
				+ "f=clan_roster&clan_name=Volcanic-Magma\r\n";
		return req;
	}

	public static byte[] getSendCookieRequest(String cookie) {
		// byte[] preamble = {00, 0x3a, 0x14, 0x0d, 0x00};
		// String preamble = "\00\0b7\2c\0b\00"; //no clan - old preamble
		byte[] preamble = { 0x00, (byte) 0x78, (byte) 0xe6, (byte) 0x0c, 0x00 };
		preamble[1] = (byte) accountId;
		preamble[2] = (byte) (accountId >> 8);
		preamble[3] = (byte) (accountId >> 16);
		preamble[4] = (byte) (accountId >> 24);
		byte[] req = new byte[preamble.length + cookie.length() + 1];
		int k = 0;
		for (int i = 0; i < preamble.length; ++i) {
			req[k++] = preamble[i];
		}
		for (int i = 0; i < cookie.length(); ++i) {
			req[k++] = (byte) cookie.charAt(i);
		}
		req[k] = 0;

		Utility.printBytes(req);

		return req;
	}

	public static String getItemListRequest() {
		String req = "POST /irc_updater/irc_requester.php HTTP/1.1\r\n"
				+ "Host: masterserver.savage2.s2games.com\r\n"
				+ "User-Agent: PHP Script\r\n"
				+ "Content-Type: application/x-www-form-urlencoded\r\n"
				+ "Content-Length: 29\r\n" + "Connection: close\r\n\r\n"
				+ "f=item_list&account_id=857146\r\n";
		return req;
	}

	public static String getGetOnlineRequest() {
		String req = "POST /irc_updater/svr_request_pub.php HTTP/1.1\r\n"
				+ "Host: masterserver.savage2.s2games.com\r\n"
				+ "User-Agent: PHP Script\r\n"
				+ "Content-Type: application/x-www-form-urlencoded\r\n"
				+ "Content-Length: 12\r\n" + "Connection: close\r\n\r\n"
				+ "f=get_online" + "\r\n";
		return req;
	}

	public static byte[] getServerConnectRequest() {
		byte[] s2magic = { (byte) 0x9a, (byte) 0xde, (byte) 0x97, (byte) 0xf1 };
		byte unknown1 = 0x01;
		byte[] unknown2 = clientID;
		byte marker = (byte) 0xc0;
		String magic = "S2_K2_CONNECT";
		String version = "2.1.1.0";
		String unknown1s = unknown1 + "\00";
		// String fixed2 = "\0b7\02c\0b\00"; // for old no clan packets
		String clanName = "";
		byte[] req = new byte[s2magic.length + 1 + 2 + 1 + magic.length() + 1
				+ version.length() + 1 + 4 + 4 + clanName.length() + 1];
		int k = 0;
		for (int i = 0; i < s2magic.length; ++i)
			req[k++] = s2magic[i];
		req[k++] = unknown1;
		req[k++] = unknown2[0];
		req[k++] = unknown2[1];
		req[k++] = marker;
		for (int i = 0; i < magic.length(); ++i)
			req[k++] = (byte) magic.charAt(i);
		req[k++] = 0;
		for (int i = 0; i < version.length(); ++i)
			req[k++] = (byte) version.charAt(i);
		req[k++] = 0;
		req[k++] = unknown1;
		req[k++] = 0;
		req[k++] = unknown2[0];
		req[k++] = unknown2[1];
		for (int i = 0; i < 4; ++i)
			req[k++] = (byte) (accountId >> (8 * i));
		for (int i = 0; i < clanName.length(); ++i)
			req[k++] = (byte) clanName.charAt(i);
		req[k++] = 0;
		return req;
	}

	public String getCookieString(String response) {
		String searchstr = "s:6:\"cookie\";s:32:";
		int cookieStrIndex = response.indexOf(searchstr) + searchstr.length()
				+ 1;
		return response.substring(cookieStrIndex, cookieStrIndex + 32);
	}
	
	public int getAccountId(String response) {
		String searchstr1 = "s:10:\"account_id\";s:";
		int lenIndex = response.indexOf(searchstr1);
		int lenStrOffset = response.indexOf(":", lenIndex + searchstr1.length());
		String lenStr = response.substring(lenIndex + searchstr1.length(), lenStrOffset);
		int len = Integer.decode(lenStr);
		int strIndex = lenStrOffset + 2;
		String acctid = response.substring(strIndex, strIndex + len);
		return Integer.decode(acctid);
	}

	/*
	 * public void sendCookie(String cookie) { String sentence; String
	 * modifiedSentence; BufferedReader inFromUser = new BufferedReader(new
	 * InputStreamReader( System.in)); try { masterSessionSocket = new
	 * Socket(CHAT_SERVER, 11030); masterSessionOutToServer = new
	 * DataOutputStream( masterSessionSocket.getOutputStream());
	 * inFromSessionServer = new BufferedReader(new InputStreamReader(
	 * masterSessionSocket.getInputStream()));
	 * masterSessionOutToServer.write(getSendCookieRequest(cookie)); int res =
	 * inFromSessionServer.read(); System.out.println("sendCookie() response = "
	 * + res); // should be // 01 } catch (Exception e) { e.printStackTrace(); }
	 * }
	 */

	boolean hasMainID = false;
	boolean printRecv = true;
	boolean sendPings = true;
	boolean readyToSpawn = false;

	public void setHasMainID(boolean x) {
		hasMainID = x;
	}

	public void setPrintRecv(boolean x) {
		printRecv = x;
	}

	public void setSendPings(boolean x) {
		sendPings = x;
	}

	public static byte[] getSendNetInfoRequest(String cookie) {
		// 1st 4 bytes are msgcounter
		byte[] u1b12 = { 1, 0, 0, 0, 3, (byte) 0xff, 8, (byte) 0xc1,
				(byte) 0x85, 0, 0, 0 };
		u1b12[5] = clientID[0];
		u1b12[6] = clientID[1];
		String netFPS = "net_FPS";
		byte separator = (byte) 0xFF;
		String fps = "20";
		String netCookie = "net_cookie";
		String netMaxBPS = "net_maxBPS";
		String maxBPS = "2000";
		String netMaxPacketSize = "net_maxPacketSize";
		String maxPacketSize = "1300";
		String netName = "net_name";
		String netSendCvars = "net_sendCvars";
		String sendCvars = "true";

		byte[] res = new byte[u1b12.length + netFPS.length() + fps.length()
				+ cookie.length() + netCookie.length() + netMaxBPS.length()
				+ maxBPS.length() + netMaxPacketSize.length()
				+ maxPacketSize.length() + netName.length() + USERNAME.length()
				+ netSendCvars.length() + sendCvars.length() + 12 + 1];
		int k = 0;
		for (int i = 0; i < u1b12.length; ++i) {
			res[k++] = u1b12[i];
		}
		for (int i = 0; i < netFPS.length(); ++i)
			res[k++] = (byte) netFPS.charAt(i);
		res[k++] = separator;
		for (int i = 0; i < fps.length(); ++i)
			res[k++] = (byte) fps.charAt(i);
		res[k++] = separator;
		for (int i = 0; i < netCookie.length(); ++i)
			res[k++] = (byte) netCookie.charAt(i);
		res[k++] = separator;
		for (int i = 0; i < cookie.length(); ++i)
			res[k++] = (byte) cookie.charAt(i);
		res[k++] = separator;
		for (int i = 0; i < netMaxBPS.length(); ++i)
			res[k++] = (byte) netMaxBPS.charAt(i);
		res[k++] = separator;
		for (int i = 0; i < maxBPS.length(); ++i)
			res[k++] = (byte) maxBPS.charAt(i);
		res[k++] = separator;
		for (int i = 0; i < netMaxPacketSize.length(); ++i)
			res[k++] = (byte) netMaxPacketSize.charAt(i);
		res[k++] = separator;
		for (int i = 0; i < maxPacketSize.length(); ++i)
			res[k++] = (byte) maxPacketSize.charAt(i);
		res[k++] = separator;
		for (int i = 0; i < netName.length(); ++i)
			res[k++] = (byte) netName.charAt(i);
		res[k++] = separator;
		for (int i = 0; i < USERNAME.length(); ++i)
			res[k++] = (byte) USERNAME.charAt(i);
		res[k++] = separator;
		for (int i = 0; i < netSendCvars.length(); ++i)
			res[k++] = (byte) netSendCvars.charAt(i);
		res[k++] = separator;
		for (int i = 0; i < sendCvars.length(); ++i)
			res[k++] = (byte) sendCvars.charAt(i);
		res[k++] = separator;
		res[k++] = (byte) 0xC2;
		return res;
	}

	void connectToGameServer(String hostname, int port, String cookie)
			throws Exception {
		GAME_SERVER_HOSTNAME = hostname;
		GAME_SERVER_PORT = port;
		DatagramSocket clientSocket = new DatagramSocket();
		gameServerClientSocket = clientSocket;
		InetAddress IPAddress = InetAddress.getByName(hostname);

		byte[] sendData = new byte[1024];
		DatagramPacket sendPacket;

		byte[] receiveData = new byte[1024];
		DatagramPacket receivePacket = new DatagramPacket(receiveData,
				receiveData.length);

		sendData = S2Factory.getGameServerDisconnect(clientID);
		sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress,
				port);
		clientSocket.send(sendPacket);

		System.out.println("Sending connect request to game server..");
		sendData = getServerConnectRequest();
		sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress,
				port);
		Utility.printBytes(sendData);
		clientSocket.send(sendPacket);

		if (chatServerUp) {
			byte[] b = { 0x10, 0x0f, 0x00, 0x00, 0x00 };
			System.out.println("Sending 5 bytes to chat server..");
			Utility.printBytes(b);
			masterSessionOutToServer.write(b);
		}

		System.out.println("Waiting for reply from game server..");
		clientSocket.receive(receivePacket);
		System.out.print("FROM SERVER:");
		Utility.printBytes(receivePacket.getData(), receivePacket.getLength());

		lastAckSent.set(1);

		sendData = getSendNetInfoRequest(cookie);
		sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress,
				port);
		System.out.println("Sending net info to game server..");
		// clientSocket.send(sendPacket);
		sendReliablePacket(sendPacket);

		// setup thread to handle reliable packets
		setupGameServerRecvThread();

		System.out.println("Sending server connect request...");
		sendData = S2Factory.getServerConnect(clientID);
		sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress,
				port);
		sendReliablePacket(sendPacket);

		// now nickname should appear in game server lobby //
	}

	public class SynchronizedBoolean {
		private boolean b = false;

		public synchronized void set(boolean val) {
			b = val;
		}

		public synchronized boolean get() {
			return b;
		}
	}

	SynchronizedBoolean hasSpawned = new SynchronizedBoolean();



	public class SynchronizedState {
		private State c = State.INLOBBY;
		boolean updated = false;

		public synchronized void set(State val) {
			c = val;
			updated = true;
		}

		public synchronized State get() {
			updated = false;
			return c;
		}

		public synchronized boolean wasUpdated() {
			return updated;
		}
	}

	SynchronizedInt lastAckReceived = new SynchronizedInt(); // from server
	SynchronizedInt lastAckSent = new SynchronizedInt(); // to server

	DatagramPacket lastPacket = null;
	boolean isFirstPacket = true;

	void sendReliablePacket(DatagramPacket sendPacket) {
		DatagramSocket clientSocket = gameServerClientSocket;
		try {
			int x, y;
			do {
				/* while */if (!isFirstPacket && !lastAckReceived.wasUpdated()) {
					// System.out.println("DOH " + lastAckReceived.get());
					try {
						Thread.sleep(50);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				x = lastAckReceived.get();
				if (!isFirstPacket
						&& x != S2Factory.getMsgCounter() - 1) {
					// Utility.printBytes(lastPacket.getData(),
					// lastPacket.getLength());
					ByteBuffer bb = ByteBuffer.allocate(4);
					bb.order(ByteOrder.LITTLE_ENDIAN);
					bb.put(lastPacket.getData()[0]);
					bb.put(lastPacket.getData()[1]);
					bb.put(lastPacket.getData()[2]);
					bb.put(lastPacket.getData()[3]);
					int lastN = bb.getInt(0);
					System.out
							.println("[LOCAL_CLIENT] Sending reliable packet #"
									+ lastN);
					clientSocket.send(lastPacket);
				}
			} while (!isFirstPacket
					&& /* lastAckReceived.get() */x != S2Factory
							.getMsgCounter() - 1);
			y = S2Factory.getMsgCounter();
			// System.out.println("Sending packet: "
			// + y);
			System.out.println("[LOCAL_CLIENT] Sending reliable packet #" + y);
			clientSocket.send(sendPacket);
			lastPacket = sendPacket;
			S2Factory.next();
			/*
			 * do { clientSocket.send(sendPacket); } while (!isFirstPacket &&
			 * lastAckReceived.get() != Savage2GameServer .getMsgCounter() - 1);
			 * 
			 * Savage2GameServer.next();
			 */
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	boolean receivedPkt3 = false;
	boolean waitingFor5bPkt = false;

	boolean joinTeam = false;
	boolean characterSelected = false;

	static byte ability = 0;
	static byte action = 0;

	boolean obtainedCmdC7Counter2 = false;

	void handlePacket(byte[] recvData, int recvDataLen) {
		InetAddress IPAddress;
		try {
			IPAddress = InetAddress.getByName(GAME_SERVER_HOSTNAME);
			byte[] sendData = new byte[1024];
			DatagramPacket sendPacket;
			int port = GAME_SERVER_PORT;

			if (obtainedCmdC7Counter2) {
				// setup client tick thread
				(new Thread(new Runnable() {
					public void run() {
						//long initTime = System.nanoTime();
						while (true) {
							try {
								Thread.sleep(50); //33// 75
								// 47 = min time without exceeding bandwidth
								// (tested
								// on local)
							} catch (InterruptedException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							//while((System.nanoTime() - initTime) % 50000000 != 0) {}
							onSendAction(ability, action);
							sendAction(ability, action);
						}
					}
				})).start();
				obtainedCmdC7Counter2 = false;
			}

			// onClientTick();

			// sendAction(ability, action);

			S2Factory.AllChatMessage acm = S2Factory
					.parseAllChat(recvData, recvDataLen);
			if (acm != null)
				onReceiveAllChat(acm.playerid, acm.msg);

			S2Factory.parsePkt5d(recvData, recvDataLen);
			//(new PlayerEntity()).parsePlayerEntities(recvData, recvDataLen);
			PlayerEntity.parsePlayerEntities(recvData, recvDataLen);
			
			int svrMsg = S2Factory.parseServerMessage(recvData, recvDataLen);
			switch(svrMsg) {
			case S2Factory.SVRMSG_OFFICER:
				onOfficerPromotion();
				break;
			case S2Factory.SVRMSG_IDLE_TIMEOUT:
				onServerIdleTimeout();
				break;
			default:
			}
			
			// see if data contains stronghold/lair id
			if (!hasMainID) {
				System.out
						.println("Checking for main IDs in recvData of length "
								+ recvDataLen);
				S2Factory.getStrongholdLairIDs(recvData);
				if (S2Factory.getStrongholdID() != 0) {
					// lairID = Savage2GameServer.getLairIDBytes();
					hasMainID = true;
					System.out.println("<<< FOUND STRONGHOLD/LAIR ID >>>");
					System.out.println(S2Factory.getStrongholdID());
					System.out.println(S2Factory.getLairID());
					// printRecv = false;
					// sendPings = false;
					// //readyToSpawn = true;
					obtainedCmdC7Counter2 = true;
				}
			}

			if (readyToSpawn && hasMainID && !hasSpawned.get()) {
				joinTeam = true;
			}
			S2Factory.parse602101(recvData, recvDataLen);
			if (readyToSpawn && hasMainID && !characterSelected
					&& !hasSpawned.get()) {
				currentState.set(State.INSPEC);
				onStateChange(State.INSPEC);
			}

			// check if received login expired error packet
			byte[] magic = { (byte) 0x9A, (byte) 0xDE, (byte) 0x97, (byte) 0xF1 };
			byte gamMagic = 1;
			String errorMsg = "Your login has expired";
			if (recvData.length > 16) {
				int i = 0;
				for (; i < magic.length; ++i) {
					if (recvData[i] != magic[i])
						break;
				}
				if (i == magic.length) {
					if (recvData[i] == gamMagic && recvData[i + 3] == 5) {
						i += 3;
						int j;
						for (j = 0; j < errorMsg.length(); ++j) {
							if (recvData[++i] != (byte) errorMsg.charAt(j))
								break;
						}
						if (j == errorMsg.length()) {
							// login expired error packet, send disconnect
							System.out
									.println("Received login expired error. Sending disconnect..");
							sendData = S2Factory
									.getGameServerDisconnect(clientID);
							sendPacket = new DatagramPacket(sendData,
									sendData.length, IPAddress, port);
							gameServerClientSocket.send(sendPacket);
							System.exit(1);
						}
					}
				}
			}

			boolean isPkt5b = S2Factory.parsePkt5b(clientID, recvData,
					recvDataLen);
			if (isPkt5b) {
				waitingFor5bPkt = false;
				readyToSpawn = true;
				printRecv = false;
			}

			boolean isPkt5e = S2Factory.parsePkt5e(clientID, recvData);

			if (isPkt5e) {
				System.out.println("Setting up requests to receive 5b pkts..");

				sendData = new byte[1];
				sendData[0] = 0x11;
				sendPacket = new DatagramPacket(sendData, sendData.length,
						IPAddress, port);
				gameServerClientSocket.send(sendPacket);

				byte[] sendData1 = { (byte) 0x9A, (byte) 0xDE, (byte) 0x97,
						(byte) 0xF1, 1, 0, 0, (byte) 0xC7, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, (byte) 0xFF, 0 };
				sendData1[5] = clientID[0];
				sendData1[6] = clientID[1];
				int val1 = S2Factory.pkt5eval1;
				int val2 = S2Factory.pkt5dval2;
				for (int i = 0; i < 4; ++i)
					sendData1[8 + i] = (byte) (val1 >> (8 * i));
				for (int i = 0; i < 4; ++i)
					sendData1[12 + i] = (byte) (val2 >> (8 * i));
				sendPacket = new DatagramPacket(sendData1, sendData1.length,
						IPAddress, port);
				gameServerClientSocket.send(sendPacket);
				waitingFor5bPkt = true;
			}

			if (!readyToSpawn && waitingFor5bPkt) {
				byte[] sendData1 = { (byte) 0x9A, (byte) 0xDE, (byte) 0x97,
						(byte) 0xF1, 1, 0, 0, (byte) 0xC7, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, (byte) 0xFF, 0 };
				sendData1[5] = clientID[0];
				sendData1[6] = clientID[1];
				int val1 = S2Factory.pkt5eval1;
				S2Factory.pkt5dval2 += 0x30;// 0x40//0x20;
				int val2 = S2Factory.pkt5dval2;
				for (int i = 0; i < 4; ++i)
					sendData1[8 + i] = (byte) (val1 >> (8 * i));
				for (int i = 0; i < 4; ++i)
					sendData1[12 + i] = (byte) (val2 >> (8 * i));
				sendPacket = new DatagramPacket(sendData1, sendData1.length,
						IPAddress, port);
				System.out.println("Sending new packet hoping for pkt5b..");
				Utility.dumpBytes(sendData1);
				gameServerClientSocket.send(sendPacket);
			}

		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException ioe) {
			ioe.printStackTrace();
		}
	}

	void logonToChatServer() {
		try {
			System.out.println("Sending cookie to session server..");
			masterSessionSocket = new Socket(CHAT_SERVER, 11030);
			masterSessionOutToServer = new DataOutputStream(
					masterSessionSocket.getOutputStream());
			inFromSessionServer = new BufferedReader(new InputStreamReader(
					masterSessionSocket.getInputStream()));
			masterSessionOutToServer.write(getSendCookieRequest(cookie));
			int res = inFromSessionServer.read();
			System.out.println("sendCookie() response (usually 01) = " + res);
			if (res == -1) {
				System.out.println("Cannot connect to chat server.");
				chatServerUp = false;
				System.exit(1);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void setupChatServerRecvThread() {
		(new Thread(new Runnable() {
			public void run() {
				char[] recvDataSess = new char[1024];
				int dataLen = 0;
				InetAddress IPAddress = null;
				try {
					IPAddress = InetAddress.getByName(GAME_SERVER_HOSTNAME);
				} catch (UnknownHostException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
					System.exit(1);
				}
				System.out.println("Entering session thread recv loop....");
				while (true) {
					try {
						dataLen = inFromSessionServer.read(recvDataSess, 0,
								1024);
						if (dataLen > 0) {
							System.out.println("FROM MASTER SESSION SERVER:");
							for (int i = 0; i < dataLen; ++i) {
								if (Character.isLetterOrDigit(recvDataSess[i]))
									System.out.print(recvDataSess[i]);
								else
									System.out.print(".");
							}
							System.out.println();
							onReceiveWhisper(recvDataSess, dataLen);
						}
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		})).start();
	}

	private void setupGameServerRecvThread() {
		(new Thread(new Runnable() {
			public void run() {
				byte[] magic = { (byte) 0x9A, (byte) 0xDE, (byte) 0x97,
						(byte) 0xF1 };
				byte ackMagic = 5;
				byte gamMagic = 1;
				try {
					InetAddress IPAddress = InetAddress
							.getByName(GAME_SERVER_HOSTNAME);
					int port = GAME_SERVER_PORT;
					DatagramPacket sendPacket;
					byte[] receiveData = new byte[8 * 1024];
					DatagramPacket receivePacket = new DatagramPacket(
							receiveData, receiveData.length);
					while (true) {
						gameServerClientSocket.receive(receivePacket);
						receiveData = receivePacket.getData();
						if (printRecv) {
							System.out
									.println("Received response from game server...");
							System.out.print("FROM SERVER: ");
							Utility.dumpBytes(receiveData,
									receivePacket.getLength());
						}

						if (receivePacket.getLength() > 5) {
							int i;
							for (i = 0; i < magic.length; ++i)
								if (receiveData[i] != magic[i])
									break;
							if (i == magic.length) {
								if (receiveData[i] == ackMagic) {
									i += 3; // skip client 2 bytes
									int ack = Utility.getInt(receiveData, i);
									System.out.println("setting recv ack to "
											+ ack);
									lastAckReceived.set(ack);
									System.out
											.println("[LOCAL_CLIENT] Received ACK #"
													+ ack);
								}
							} else {
								// not an in-game packet
								// first 4 bytes are sequence number, send
								// ACK
								// to
								// server
								byte[] ack = new byte[magic.length + 3 + 4];
								int k = 0;
								for (i = 0; i < magic.length; ++i)
									ack[k++] = magic[i];
								ack[k++] = ackMagic;
								ack[k++] = clientID[0];
								ack[k++] = clientID[1];
								ack[k++] = receiveData[0];
								ack[k++] = receiveData[1];
								ack[k++] = receiveData[2];
								ack[k] = receiveData[3];
								int n = Utility.getInt(receiveData, 0);
								System.out
										.println("[LOCAL_CLIENT] Received reliable packet #"
												+ n
												+ ", expecting #"
												+ lastAckSent.get());
								lastAckSent.set(n + 1);
								sendPacket = new DatagramPacket(ack,
										ack.length, IPAddress, port);
								gameServerClientSocket.send(sendPacket);
							}
						}
						// send packets to packet handler method
						handlePacket(receiveData, receivePacket.getLength());
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		})).start();
	}

	static InetAddress gameServerIPAddress;
	static int gameServerPort;

	/************** INTERFACING METHODS **********************/

	public void login(String username, String password) {
		try {
			masterserverSocket = new Socket(MASTER_SERVER, 80);
			outToMasterServer = new DataOutputStream(
					masterserverSocket.getOutputStream());
			inFromMasterServer = new BufferedReader(new InputStreamReader(
					masterserverSocket.getInputStream()));

			Socket masterserverSocket = new Socket(MASTER_SERVER, 80);
			DataOutputStream outToMasterServer = new DataOutputStream(
					masterserverSocket.getOutputStream());
			BufferedReader inFromMasterServer = new BufferedReader(
					new InputStreamReader(masterserverSocket.getInputStream()));

			// pre login //

			// reply = Utility.http_get_contents(MASTER_SERVER,
			// getPatcherRequest());
			// reply = Utility.http_get_contents(MASTER_SERVER,
			// getPersistentItemsRequest());
			// reply = Utility.http_get_contents(MASTER_SERVER,
			// getFriendInfoRequest());

			// login //

			System.out.println("Sending login request..");
			outToMasterServer.writeBytes(getLoginRequest(username, password));
			USERNAME = username;
			PASSWORD = password;
			String line;
			do {
				line = inFromMasterServer.readLine();
				if (line == null) {
					System.out.println("Received blank response. Aborting.");
					System.exit(1);
				}
			} while (!line.contains("account_id"));
			System.out.println("Account id line: " + line);
			// modifiedSentence = inFromServer.readLine();
			cookie = getCookieString(line);
			accountId = getAccountId(line);
			System.out
					.println("Cookie retrieved from master server: " + cookie);
			login = 1;

			// post login //

			// reply = Utility.http_get_contents(MASTER_SERVER,
			// getClanRosterRequest());

			// send cookie..
			chatServerUp = false;

			// setup chat server recvdata thread for incoming whisper
			// messages, etc.
			if (chatServerUp) {
				logonToChatServer();
				setupChatServerRecvThread();
			}

			// get online..
			// System.out.println("Sending get_online request to master server..");
			// reply = Utility.http_get_contents(MASTER_SERVER,
			// getGetOnlineRequest());
			// System.out
			// .println("Received get_online reply from master server..");

			// item list..
			// reply = Utility.http_get_contents(MASTER_SERVER,
			// getItemListRequest());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void connectToGameServer(String hostname, int port) {
		try {
			gameServerIPAddress = InetAddress.getByName(hostname);
			connectToGameServer(hostname, port, cookie);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		gameServerPort = port;
	}

	public void disconnectFromGameServer() {
		System.out.println("Sending disconnect request..");
		byte[] sendData = S2Factory.getGameServerDisconnect(clientID);
		DatagramPacket sendPacket = new DatagramPacket(sendData,
				sendData.length, gameServerIPAddress, GAME_SERVER_PORT);
		sendReliablePacket(sendPacket);
		onStateChange(State.INLOBBY);
	}

	public void sendJoinTeamRequest(byte team) {
		byte[] sendData = S2Factory.getJoinTeam(clientID, team);
		DatagramPacket sendPacket = new DatagramPacket(sendData,
				sendData.length, gameServerIPAddress, GAME_SERVER_PORT);
		sendReliablePacket(sendPacket);
		// need to check if joined team successfully!
		currentState.set(State.INTEAM);
		onStateChange(State.INTEAM);
	}

	public void sendJoinSquadRequest(int squadNo) {
		byte[] sendData = S2Factory.getJoinSquad(clientID, squadNo);
		DatagramPacket sendPacket = new DatagramPacket(sendData,
				sendData.length, gameServerIPAddress, GAME_SERVER_PORT);
		sendReliablePacket(sendPacket);
		// nned to check if successful!
		currentState.set(State.LOADOUT);
		onStateChange(State.LOADOUT);
	}

	public void sendSelectCharacterRequest(byte character) {
		byte[] sendData = S2Factory.getCharacterSelect(clientID,
				character);
		DatagramPacket sendPacket = new DatagramPacket(sendData,
				sendData.length, gameServerIPAddress, GAME_SERVER_PORT);
		sendReliablePacket(sendPacket);
		// there should be a way to check for successful selection of character!
		characterSelected = true;
		currentState.set(State.SPAWNSCREEN);
		onStateChange(State.SPAWNSCREEN);
	}

	public void sendSpawnRequest(short spawnID) {
		byte[] sendData = S2Factory.getSpawnCommand(clientID, spawnID);
		DatagramPacket sendPacket = new DatagramPacket(sendData,
				sendData.length, gameServerIPAddress, GAME_SERVER_PORT);
		sendReliablePacket(sendPacket);
		// there should be a way to check if client has successfully spawned!
		hasSpawned.set(true);
		currentState.set(State.ONFIELD);
		onStateChange(State.ONFIELD);
	}

	public static void sendMinimapPingRequest() {
		/*
		 * for(int h = 0;h < 3; ++h) { Thread.sleep(3000); ByteBuffer bb =
		 * ByteBuffer.allocate(4); bb.order(ByteOrder.LITTLE_ENDIAN);
		 * bb.put((byte)0x5C); bb.put((byte)0x08); bb.put((byte)0xB5);
		 * bb.put((byte)0x46); float x = bb.getFloat(0); bb.rewind();
		 * bb.put((byte)0x7E); bb.put((byte)0x4D); bb.put((byte)0x1E);
		 * bb.put((byte)0x46); float y = bb.getFloat(0); bb.rewind();
		 * System.out.println("Ping at "+ String.format("%.4f", x) + ", " +
		 * String.format("%.4f", y)); sendData =
		 * Savage2GameServer.getPingMinimapRequest(unknown2bytes, x, y);
		 * sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress,
		 * port); clientSocket.send(sendPacket); }
		 */
	}

	public static void setAction(byte ab, byte ac) {
		ability = ab;
		action = ac;
	}

	private static void sendAction(byte ability, byte action) {
		byte[] sendData = S2Factory.getActionPacket(clientID, ability,
				action, 0);
		// byte[] sendData = Savage2GameServer.getTestPacket(clientID, action);
		DatagramPacket sendPacket = new DatagramPacket(sendData,
				sendData.length, gameServerIPAddress, GAME_SERVER_PORT);
		try {
			gameServerClientSocket.send(sendPacket);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void sendVCCommand(int vc) {
		byte[] sendData = S2Factory.getVoiceCommand(vc, clientID);
		DatagramPacket sendPacket = new DatagramPacket(sendData,
				sendData.length, gameServerIPAddress, GAME_SERVER_PORT);
		sendReliablePacket(sendPacket);
	}

	//public abstract void onClientTick();

	public abstract void onStateChange(State state);

	public abstract void onReceiveWhisper(char[] b, int len);

	public abstract void onReceiveAllChat(int playerid, String msg);
	
	public abstract void onSendAction(byte ability, byte action);
	
	public abstract void onOfficerPromotion();
	
	public abstract void onServerIdleTimeout();

}